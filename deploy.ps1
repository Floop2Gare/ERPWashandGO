# Script de d√©ploiement automatis√© pour Vercel
# Usage: .\deploy.ps1

Write-Host "üöÄ D√âPLOIEMENT VERCEL AUTOMATIS√â" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan

# Fonction pour ex√©cuter une commande avec gestion d'erreur
function Invoke-CommandWithErrorHandling {
    param(
        [string]$Command,
        [string]$Description
    )
    
    Write-Host "`nüìã $Description" -ForegroundColor Yellow
    Write-Host "üíª Commande: $Command" -ForegroundColor Gray
    
    try {
        Invoke-Expression $Command
        Write-Host "‚úÖ Succ√®s" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå √âchec" -ForegroundColor Red
        Write-Host "Erreur: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour v√©rifier l'√©tat Git
function Test-GitStatus {
    Write-Host "`nüîç V√©rification de l'√©tat Git" -ForegroundColor Yellow
    
    try {
        # V√©rifier si on est dans un repo Git
        git status | Out-Null
        Write-Host "‚úÖ Repository Git d√©tect√©" -ForegroundColor Green
        
        # V√©rifier s'il y a des changements non commit√©s
        $status = git status --porcelain
        if ($status) {
            Write-Host "‚ö†Ô∏è  Changements non commit√©s d√©tect√©s:" -ForegroundColor Yellow
            Write-Host $status -ForegroundColor Gray
            return $false
        } else {
            Write-Host "‚úÖ Aucun changement non commit√©" -ForegroundColor Green
            return $true
        }
    }
    catch {
        Write-Host "‚ùå Erreur Git: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour cr√©er un commit automatique
function New-AutoCommit {
    Write-Host "`nüìù Cr√©ation d'un commit automatique" -ForegroundColor Yellow
    
    try {
        # Ajouter tous les fichiers
        git add .
        Write-Host "‚úÖ Fichiers ajout√©s au staging" -ForegroundColor Green
        
        # Cr√©er un commit avec timestamp
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $commitMessage = "Auto-deploy: $timestamp"
        
        git commit -m $commitMessage
        Write-Host "‚úÖ Commit cr√©√©: $commitMessage" -ForegroundColor Green
        
        return $true
    }
    catch {
        Write-Host "‚ùå Erreur lors du commit: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour pousser vers le repository
function Push-ToRepository {
    Write-Host "`nüì§ Push vers le repository" -ForegroundColor Yellow
    
    try {
        git push origin main
        Write-Host "‚úÖ Push r√©ussi vers origin/main" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "‚ùå Erreur lors du push: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Fonction pour v√©rifier le d√©ploiement Vercel
function Test-VercelDeployment {
    Write-Host "`nüåê V√©rification du d√©ploiement Vercel" -ForegroundColor Yellow
    
    try {
        # V√©rifier si Vercel CLI est install√©
        vercel --version | Out-Null
        Write-Host "‚úÖ Vercel CLI d√©tect√©" -ForegroundColor Green
        
        # D√©ployer en mode preview
        Write-Host "üöÄ D√©ploiement Vercel en cours..." -ForegroundColor Yellow
        $deployResult = Invoke-CommandWithErrorHandling "vercel --yes" "D√©ploiement Vercel preview"
        
        if ($deployResult) {
            Write-Host "‚úÖ D√©ploiement Vercel r√©ussi" -ForegroundColor Green
            return $true
        } else {
            Write-Host "‚ùå D√©ploiement Vercel √©chou√©" -ForegroundColor Red
            return $false
        }
    }
    catch {
        Write-Host "‚ùå Vercel CLI non trouv√©: $($_.Exception.Message)" -ForegroundColor Red
        Write-Host "‚ÑπÔ∏è  Installation de Vercel CLI..." -ForegroundColor Yellow
        
        try {
            npm install -g vercel
            Write-Host "‚úÖ Vercel CLI install√©" -ForegroundColor Green
            return Test-VercelDeployment
        }
        catch {
            Write-Host "‚ùå Impossible d'installer Vercel CLI: $($_.Exception.Message)" -ForegroundColor Red
            return $false
        }
    }
}

# Processus principal
Write-Host "`nüéØ D√©but du processus de d√©ploiement automatis√©" -ForegroundColor Cyan

# √âtape 1: V√©rifier l'√©tat Git
$gitStatus = Test-GitStatus
if (-not $gitStatus) {
    Write-Host "`n‚ö†Ô∏è  Changements d√©tect√©s, cr√©ation d'un commit automatique..." -ForegroundColor Yellow
    if (-not (New-AutoCommit)) {
        Write-Host "‚ùå Impossible de cr√©er un commit. Arr√™t du processus." -ForegroundColor Red
        exit 1
    }
}

# √âtape 2: Build et test
Write-Host "`nüî® √âtape 2: Build et test" -ForegroundColor Yellow
$buildResult = Invoke-CommandWithErrorHandling "node test-vercel-deployment.js" "Test automatis√© du build"

if (-not $buildResult) {
    Write-Host "‚ùå Le test de build a √©chou√©. Arr√™t du processus." -ForegroundColor Red
    exit 1
}

# √âtape 3: Push vers le repository
Write-Host "`nüì§ √âtape 3: Push vers le repository" -ForegroundColor Yellow
if (-not (Push-ToRepository)) {
    Write-Host "‚ùå Le push a √©chou√©. Arr√™t du processus." -ForegroundColor Red
    exit 1
}

# √âtape 4: D√©ploiement Vercel (optionnel)
Write-Host "`nüåê √âtape 4: D√©ploiement Vercel" -ForegroundColor Yellow
$deploySuccess = Test-VercelDeployment

# R√©sultat final
Write-Host "`nüéØ R√âSULTAT FINAL" -ForegroundColor Cyan
Write-Host "================" -ForegroundColor Cyan

if ($buildResult -and $deploySuccess) {
    Write-Host "üéâ D√âPLOIEMENT COMPLET R√âUSSI !" -ForegroundColor Green
    Write-Host "‚úÖ Build test√© et valid√©" -ForegroundColor Green
    Write-Host "‚úÖ Code pouss√© vers le repository" -ForegroundColor Green
    Write-Host "‚úÖ D√©ploiement Vercel r√©ussi" -ForegroundColor Green
    Write-Host "`nüöÄ Votre application est maintenant d√©ploy√©e !" -ForegroundColor Green
} elseif ($buildResult) {
    Write-Host "‚úÖ BUILD R√âUSSI - CODE POUSS√â" -ForegroundColor Green
    Write-Host "‚úÖ Build test√© et valid√©" -ForegroundColor Green
    Write-Host "‚úÖ Code pouss√© vers le repository" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è  D√©ploiement Vercel non effectu√© (optionnel)" -ForegroundColor Yellow
    Write-Host "`nüöÄ Vercel d√©ploiera automatiquement depuis le repository !" -ForegroundColor Green
} else {
    Write-Host "‚ùå D√âPLOIEMENT √âCHOU√â" -ForegroundColor Red
    Write-Host "üîß V√©rifiez les erreurs ci-dessus" -ForegroundColor Red
    exit 1
}

Write-Host "`n‚ú® Processus de d√©ploiement termin√© !" -ForegroundColor Cyan
