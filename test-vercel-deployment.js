const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üß™ TEST AUTOMATIS√â VERCEL - SIMULATION COMPL√àTE');
console.log('================================================');

// Fonction pour ex√©cuter une commande et capturer la sortie
function runCommand(command, description) {
  console.log(`\nüìã ${description}`);
  console.log(`üíª Commande: ${command}`);
  
  try {
    const output = execSync(command, { 
      encoding: 'utf8', 
      stdio: 'pipe',
      cwd: process.cwd()
    });
    console.log('‚úÖ Succ√®s');
    return { success: true, output };
  } catch (error) {
    console.log('‚ùå √âchec');
    console.log('Erreur:', error.message);
    return { success: false, error: error.message };
  }
}

// Fonction pour v√©rifier l'existence d'un fichier/r√©pertoire
function checkExists(path, description) {
  if (fs.existsSync(path)) {
    console.log(`‚úÖ ${description} - OK`);
    return true;
  } else {
    console.log(`‚ùå ${description} - MANQUANT`);
    return false;
  }
}

// Fonction pour lister le contenu d'un r√©pertoire
function listDirectory(dirPath, description) {
  console.log(`\nüìÅ ${description}:`);
  if (fs.existsSync(dirPath)) {
    const items = fs.readdirSync(dirPath);
    items.forEach(item => {
      const itemPath = path.join(dirPath, item);
      const stats = fs.statSync(itemPath);
      const type = stats.isDirectory() ? 'üìÅ' : 'üìÑ';
      const size = stats.isFile() ? ` (${Math.round(stats.size / 1024)}KB)` : '';
      console.log(`  ${type} ${item}${size}`);
    });
    return items;
  } else {
    console.log('  ‚ùå R√©pertoire introuvable');
    return [];
  }
}

// ===== √âTAPE 1: NETTOYAGE =====
console.log('\nüßπ √âTAPE 1: Nettoyage des fichiers de test');
if (fs.existsSync('dist')) {
  fs.rmSync('dist', { recursive: true, force: true });
  console.log('‚úÖ R√©pertoire dist supprim√©');
} else {
  console.log('‚ÑπÔ∏è  R√©pertoire dist n\'existait pas');
}

if (fs.existsSync('frontend/dist')) {
  fs.rmSync('frontend/dist', { recursive: true, force: true });
  console.log('‚úÖ R√©pertoire frontend/dist supprim√©');
} else {
  console.log('‚ÑπÔ∏è  R√©pertoire frontend/dist n\'existait pas');
}

// ===== √âTAPE 2: V√âRIFICATION DES FICHIERS N√âCESSAIRES =====
console.log('\nüîç √âTAPE 2: V√©rification des fichiers n√©cessaires');
const requiredFiles = [
  'package.json',
  'vercel.json',
  'build-vercel.js',
  'frontend/package.json',
  'frontend/src/main.tsx',
  'frontend/vite.config.ts'
];

let allRequiredFilesExist = true;
requiredFiles.forEach(file => {
  if (!checkExists(file, file)) {
    allRequiredFilesExist = false;
  }
});

if (!allRequiredFilesExist) {
  console.log('\n‚ùå Certains fichiers requis sont manquants. Arr√™t du test.');
  process.exit(1);
}

// ===== √âTAPE 3: SIMULATION DU BUILD VERCEL =====
console.log('\nüöÄ √âTAPE 3: Simulation du build Vercel');
const buildResult = runCommand('node build-vercel.js', 'Ex√©cution du script de build Vercel');

if (!buildResult.success) {
  console.log('\n‚ùå Le build a √©chou√©. Arr√™t du test.');
  process.exit(1);
}

// ===== √âTAPE 4: V√âRIFICATION DU R√âSULTAT =====
console.log('\n‚úÖ √âTAPE 4: V√©rification du r√©sultat du build');

// V√©rifier que le r√©pertoire dist existe
if (!checkExists('dist', 'R√©pertoire dist √† la racine')) {
  console.log('\n‚ùå Le r√©pertoire dist n\'a pas √©t√© cr√©√©. Test √©chou√©.');
  process.exit(1);
}

// V√©rifier les fichiers essentiels
const essentialFiles = [
  'dist/index.html',
  'dist/assets/index-C1nhNqaR.js',
  'dist/assets/index-BOD3LxIa.css'
];

let allEssentialFilesExist = true;
essentialFiles.forEach(file => {
  if (!checkExists(file, file)) {
    allEssentialFilesExist = false;
  }
});

if (!allEssentialFilesExist) {
  console.log('\n‚ùå Certains fichiers essentiels sont manquants. Test √©chou√©.');
  process.exit(1);
}

// ===== √âTAPE 5: V√âRIFICATION DU CONTENU =====
console.log('\nüìÑ √âTAPE 5: V√©rification du contenu');

// V√©rifier le contenu du index.html
const indexPath = 'dist/index.html';
if (fs.existsSync(indexPath)) {
  const content = fs.readFileSync(indexPath, 'utf8');
  const checks = [
    { test: content.includes('Wash'), description: 'Titre Wash&Go' },
    { test: content.includes('assets/'), description: 'R√©f√©rences aux assets' },
    { test: content.includes('root'), description: '√âl√©ment root' },
    { test: content.includes('<!doctype html>'), description: 'DOCTYPE HTML' }
  ];
  
  checks.forEach(check => {
    if (check.test) {
      console.log(`‚úÖ ${check.description}`);
    } else {
      console.log(`‚ùå ${check.description}`);
    }
  });
}

// Lister le contenu du r√©pertoire dist
listDirectory('dist', 'Contenu du r√©pertoire dist');
listDirectory('dist/assets', 'Contenu du r√©pertoire dist/assets');

// ===== √âTAPE 6: TEST DE FONCTIONNEMENT LOCAL =====
console.log('\nüåê √âTAPE 6: Test de fonctionnement local');

// V√©rifier que tous les assets r√©f√©renc√©s existent
const htmlContent = fs.readFileSync('dist/index.html', 'utf8');
const assetMatches = htmlContent.match(/assets\/[^"'\s]+/g) || [];
console.log(`\nüîó Assets r√©f√©renc√©s dans index.html: ${assetMatches.length}`);

let allAssetsExist = true;
assetMatches.forEach(asset => {
  const assetPath = `dist/${asset}`;
  if (fs.existsSync(assetPath)) {
    console.log(`‚úÖ ${asset}`);
  } else {
    console.log(`‚ùå ${asset} - MANQUANT`);
    allAssetsExist = false;
  }
});

// ===== R√âSULTAT FINAL =====
console.log('\nüéØ R√âSULTAT FINAL');
console.log('================');

if (allRequiredFilesExist && allEssentialFilesExist && allAssetsExist) {
  console.log('üéâ TOUS LES TESTS SONT PASS√âS !');
  console.log('‚úÖ Configuration Vercel 100% fonctionnelle');
  console.log('‚úÖ Build process complet et fonctionnel');
  console.log('‚úÖ Tous les fichiers sont pr√©sents et corrects');
  console.log('‚úÖ Pr√™t pour le d√©ploiement Vercel');
  console.log('\nüöÄ Vous pouvez maintenant d√©ployer sur Vercel avec confiance !');
} else {
  console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â');
  console.log('üîß V√©rifiez la configuration avant de d√©ployer');
  process.exit(1);
}

console.log('\nüìä STATISTIQUES DU BUILD');
console.log('========================');

// Calculer la taille totale
function getDirectorySize(dirPath) {
  let totalSize = 0;
  const items = fs.readdirSync(dirPath);
  
  items.forEach(item => {
    const itemPath = path.join(dirPath, item);
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      totalSize += getDirectorySize(itemPath);
    } else {
      totalSize += stats.size;
    }
  });
  
  return totalSize;
}

const totalSize = getDirectorySize('dist');
const totalSizeKB = Math.round(totalSize / 1024);
const totalSizeMB = Math.round(totalSize / (1024 * 1024) * 100) / 100;

console.log(`üìÅ Taille totale du build: ${totalSizeKB}KB (${totalSizeMB}MB)`);
console.log(`üìÑ Nombre de fichiers: ${countFiles('dist')}`);

function countFiles(dirPath) {
  let count = 0;
  const items = fs.readdirSync(dirPath);
  
  items.forEach(item => {
    const itemPath = path.join(dirPath, item);
    const stats = fs.statSync(itemPath);
    
    if (stats.isDirectory()) {
      count += countFiles(itemPath);
    } else {
      count++;
    }
  });
  
  return count;
}

console.log('\n‚ú® Test automatis√© termin√© avec succ√®s !');
